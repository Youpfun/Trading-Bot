import asyncio
import logging
import os
import json
import time
from datetime import datetime, timedelta
import requests
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import websocket
import threading
from dotenv import load_dotenv
import schedule
import warnings
warnings.filterwarnings('ignore')

# Configuration du logging (compatible Windows)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("crypto_trading_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# Chargement des variables d'environnement
load_dotenv()

class CoinbaseRealtimeBot:
    def __init__(self):
        # Configuration Telegram
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        
        if not self.telegram_token or not self.chat_id:
            logging.error("TELEGRAM_BOT_TOKEN ou TELEGRAM_CHAT_ID manquants dans .env")
            print("‚ùå ERREUR: Configuration Telegram manquante")
            print("üìù V√©rifiez votre fichier .env :")
            print("   - TELEGRAM_BOT_TOKEN=votre_token_du_botfather") 
            print("   - TELEGRAM_CHAT_ID=votre_chat_id")
            print("üí° Utilisez le script get_chat_id.py pour obtenir votre Chat ID")
            exit("Erreur: Configuration Telegram manquante")
        
        # Test de validation du token
        if self.telegram_token == "your_telegram_bot_token_from_botfather":
            logging.error("Token Telegram par d√©faut d√©tect√©")
            print("‚ùå ERREUR: Token Telegram non configur√©")
            print("üîë Remplacez 'your_telegram_bot_token_from_botfather' par votre vrai token")
            print("üí° Obtenez votre token via @BotFather sur Telegram")
            exit("Erreur: Token Telegram invalide")
        
        try:
            self.telegram_bot = Bot(token=self.telegram_token)
        except Exception as e:
            logging.error(f"Erreur initialisation bot Telegram: {e}")
            print("‚ùå ERREUR: Token Telegram invalide ou probl√®me r√©seau")
            print("üîç V√©rifiez que votre token est correct")
            exit("Erreur: Impossible d'initialiser le bot Telegram")
        
        # Configuration Coinbase
        self.coinbase_api_key = os.getenv("COINBASE_API_KEY")
        self.coinbase_secret = os.getenv("COINBASE_API_SECRET")
        self.coinbase_passphrase = os.getenv("COINBASE_PASSPHRASE")
        
        # Param√®tres du bot
        self.trading_mode = os.getenv("TRADING_MODE", "SIMULATION")
        self.prediction_threshold = float(os.getenv("PREDICTION_THRESHOLD", "0.00002"))
        self.volume_growth_factor = float(os.getenv("VOLUME_GROWTH_FACTOR", "2.0"))
        self.price_surge_percentage = float(os.getenv("PRICE_SURGE_PERCENTAGE", "0.01"))
        
        # Donn√©es en temps r√©el
        self.realtime_data = {}
        self.historical_data = {}
        self.models = {}
        self.last_alerts = {}  # Pour √©viter le spam
        
        # WebSocket
        self.ws = None
        self.ws_thread = None
        
        # Instruments √† surveiller (paires populaires sur Coinbase)
        self.instruments = [
            'BTC-USD', 'ETH-USD', 'ADA-USD', 'DOT-USD', 'SOL-USD',
            'MATIC-USD', 'AVAX-USD', 'LINK-USD', 'UNI-USD', 'ATOM-USD',
            'XLM-USD', 'LTC-USD', 'BCH-USD', 'FIL-USD', 'ALGO-USD'
        ]
        
        logging.info("üöÄ Bot de Trading Crypto initialis√© avec surveillance Coinbase en temps r√©el")
        self.send_telegram_message("ü§ñ Bot de Trading Crypto d√©marr√©!\nüíπ Surveillance des march√©s Coinbase activ√©e")

    def send_telegram_message(self, message):
        """Envoie un message via Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            logging.info(f"Message Telegram envoy√©: {message[:50]}...")
        except Exception as e:
            logging.error(f"Erreur envoi Telegram: {e}")

    def get_coinbase_historical_data(self, product_id, granularity=900, periods=200):
        """R√©cup√®re les donn√©es historiques de Coinbase Pro"""
        try:
            end_time = datetime.now()
            start_time = end_time - timedelta(seconds=granularity * periods)
            
            url = f"https://api.exchange.coinbase.com/products/{product_id}/candles"
            params = {
                'start': start_time.isoformat(),
                'end': end_time.isoformat(),
                'granularity': granularity
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if not data:
                return None
                
            # Conversion en DataFrame
            df = pd.DataFrame(data, columns=['time', 'low', 'high', 'open', 'close', 'volume'])
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df = df.sort_values('time').reset_index(drop=True)
            
            # Conversion des types
            for col in ['low', 'high', 'open', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            return df
            
        except Exception as e:
            logging.error(f"Erreur r√©cup√©ration donn√©es Coinbase pour {product_id}: {e}")
            return None

    def create_features(self, df):
        """Cr√©e les caract√©ristiques techniques"""
        if df.empty or len(df) < 50:
            return pd.DataFrame()
        
        try:
            # Indicateurs techniques
            df['returns'] = df['close'].pct_change()
            df['ma_10'] = df['close'].rolling(window=10).mean()
            df['ma_20'] = df['close'].rolling(window=20).mean()
            df['ma_50'] = df['close'].rolling(window=50).mean()
            df['volatility'] = df['returns'].rolling(window=20).std()
            df['rsi'] = self.calculate_rsi(df['close'])
            df['volume_ma'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_ma']
            df['price_change'] = df['close'].pct_change(5)  # Changement sur 5 p√©riodes
            
            # MACD
            df['macd'], df['macd_signal'], df['macd_hist'] = self.calculate_macd(df['close'])
            
            # Bandes de Bollinger
            df['bb_upper'], df['bb_lower'] = self.calculate_bollinger_bands(df['close'])
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
            
            # Nettoyage
            df = df.dropna()
            return df
            
        except Exception as e:
            logging.error(f"Erreur cr√©ation caract√©ristiques: {e}")
            return pd.DataFrame()

    def calculate_rsi(self, prices, period=14):
        """Calcule le RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def calculate_macd(self, prices, fast=12, slow=26, signal=9):
        """Calcule le MACD"""
        ema_fast = prices.ewm(span=fast).mean()
        ema_slow = prices.ewm(span=slow).mean()
        macd = ema_fast - ema_slow
        macd_signal = macd.ewm(span=signal).mean()
        macd_hist = macd - macd_signal
        return macd, macd_signal, macd_hist

    def calculate_bollinger_bands(self, prices, period=20, std_dev=2):
        """Calcule les Bandes de Bollinger"""
        ma = prices.rolling(window=period).mean()
        std = prices.rolling(window=period).std()
        upper = ma + (std * std_dev)
        lower = ma - (std * std_dev)
        return upper, lower

    def train_model(self, df, product_id):
        """Entra√Æne le mod√®le de pr√©diction"""
        if df.empty or len(df) < 100:
            return None
        
        try:
            features = ['ma_10', 'ma_20', 'ma_50', 'volatility', 'rsi', 'volume_ratio', 
                       'macd', 'macd_signal', 'macd_hist', 'bb_position', 'price_change']
            
            # V√©rification que toutes les caract√©ristiques existent
            missing_features = [f for f in features if f not in df.columns]
            if missing_features:
                logging.warning(f"Caract√©ristiques manquantes pour {product_id}: {missing_features}")
                return None
            
            X = df[features].values
            y = df['returns'].shift(-1).dropna().values  # Pr√©dire le prochain retour
            
            # Ajuster X pour correspondre √† y
            X = X[:-1]
            
            if len(X) < 50:
                return None
            
            # Division train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, shuffle=False
            )
            
            # Entra√Ænement
            model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
            model.fit(X_train, y_train)
            
            # √âvaluation
            predictions = model.predict(X_test)
            mse = mean_squared_error(y_test, predictions)
            logging.info(f"Mod√®le entra√Æn√© pour {product_id} - MSE: {mse:.6f}")
            
            return model
            
        except Exception as e:
            logging.error(f"Erreur entra√Ænement mod√®le pour {product_id}: {e}")
            return None

    def analyze_instrument(self, product_id):
        """Analyse un instrument et g√©n√®re des signaux"""
        try:
            # R√©cup√©ration des donn√©es historiques
            df = self.get_coinbase_historical_data(product_id)
            if df is None or df.empty:
                return
            
            # Cr√©ation des caract√©ristiques
            df_features = self.create_features(df)
            if df_features.empty:
                return
            
            # Entra√Ænement du mod√®le
            model = self.train_model(df_features, product_id)
            if model is None:
                return
            
            # Stockage pour utilisation temps r√©el
            self.models[product_id] = model
            self.historical_data[product_id] = df_features
            
            # Pr√©diction sur les derni√®res donn√©es
            self.make_prediction(product_id, df_features.iloc[-1])
            
        except Exception as e:
            logging.error(f"Erreur analyse {product_id}: {e}")

    def make_prediction(self, product_id, latest_data):
        """Fait une pr√©diction et g√©n√®re des alertes"""
        try:
            if product_id not in self.models:
                return
            
            model = self.models[product_id]
            features = ['ma_10', 'ma_20', 'ma_50', 'volatility', 'rsi', 'volume_ratio', 
                       'macd', 'macd_signal', 'macd_hist', 'bb_position', 'price_change']
            
            # Pr√©paration des donn√©es pour pr√©diction
            X = latest_data[features].values.reshape(1, -1)
            prediction = model.predict(X)[0]
            
            # R√©cup√©ration du prix actuel
            current_price = latest_data['close']
            current_volume = latest_data['volume']
            
            # D√©tection des signaux
            signals = []
            
            # Signal de pr√©diction
            if abs(prediction) > self.prediction_threshold:
                direction = "üìà ACHAT" if prediction > 0 else "üìâ VENTE"
                confidence = min(abs(prediction) * 10000, 100)  # Score de confiance
                signals.append({
                    'type': 'PREDICTION',
                    'direction': direction,
                    'prediction': prediction,
                    'confidence': confidence
                })
            
            # Signal de volume
            volume_ma = latest_data['volume_ma']
            if current_volume > volume_ma * self.volume_growth_factor:
                signals.append({
                    'type': 'VOLUME',
                    'direction': 'üî• VOLUME √âLEV√â',
                    'ratio': current_volume / volume_ma
                })
            
            # Signal RSI
            rsi = latest_data['rsi']
            if rsi < 30:
                signals.append({'type': 'RSI', 'direction': 'üíé SURVENTE (RSI < 30)', 'value': rsi})
            elif rsi > 70:
                signals.append({'type': 'RSI', 'direction': '‚ö†Ô∏è SURACHAT (RSI > 70)', 'value': rsi})
            
            # Signal Bollinger Bands
            bb_position = latest_data['bb_position']
            if bb_position < 0.1:
                signals.append({'type': 'BB', 'direction': 'üíé PROCHE BANDE BASSE', 'value': bb_position})
            elif bb_position > 0.9:
                signals.append({'type': 'BB', 'direction': '‚ö†Ô∏è PROCHE BANDE HAUTE', 'value': bb_position})
            
            # Envoi des alertes
            if signals:
                self.send_trading_alert(product_id, current_price, signals)
                
        except Exception as e:
            logging.error(f"Erreur pr√©diction {product_id}: {e}")

    def send_trading_alert(self, product_id, price, signals):
        """Envoie une alerte de trading via Telegram"""
        try:
            # √âviter le spam - max 1 alerte par instrument toutes les 5 minutes
            now = time.time()
            if product_id in self.last_alerts:
                if now - self.last_alerts[product_id] < 300:  # 5 minutes
                    return
            
            self.last_alerts[product_id] = now
            
            # Construction du message
            message = f"üö® <b>ALERTE TRADING</b> üö®\n"
            message += f"üí∞ <b>{product_id}</b>\n"
            message += f"üíµ Prix: <b>${price:.4f}</b>\n"
            message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            for signal in signals:
                if signal['type'] == 'PREDICTION':
                    message += f"{signal['direction']}\n"
                    message += f"üìä Pr√©diction: {signal['prediction']:.6f}\n"
                    message += f"üéØ Confiance: {signal['confidence']:.1f}%\n\n"
                elif signal['type'] == 'VOLUME':
                    message += f"{signal['direction']}\n"
                    message += f"üìà Ratio: {signal['ratio']:.2f}x\n\n"
                elif signal['type'] == 'RSI':
                    message += f"{signal['direction']}\n"
                    message += f"üìä RSI: {signal['value']:.1f}\n\n"
                elif signal['type'] == 'BB':
                    message += f"{signal['direction']}\n"
                    message += f"üìä Position: {signal['value']:.2f}\n\n"
            
            message += f"ü§ñ Mode: {self.trading_mode}"
            
            self.send_telegram_message(message)
            logging.info(f"Alerte envoy√©e pour {product_id}: {len(signals)} signaux")
            
        except Exception as e:
            logging.error(f"Erreur envoi alerte {product_id}: {e}")

    def start_websocket(self):
        """D√©marre la connexion WebSocket pour les donn√©es temps r√©el"""
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if data['type'] == 'ticker':
                    product_id = data['product_id']
                    if product_id in self.instruments:
                        # Mise √† jour des donn√©es temps r√©el
                        self.realtime_data[product_id] = {
                            'price': float(data['price']),
                            'volume_24h': float(data['volume_24h']),
                            'time': datetime.now()
                        }
                        # Analyse p√©riodique (toutes les 30 secondes max)
                        if product_id in self.historical_data:
                            last_analysis = getattr(self, 'last_analysis', {})
                            now = time.time()
                            if product_id not in last_analysis or now - last_analysis.get(product_id, 0) > 30:
                                last_analysis[product_id] = now
                                self.last_analysis = last_analysis
                                # Analyse bas√©e sur les nouvelles donn√©es
                                threading.Thread(
                                    target=self.analyze_realtime_data, 
                                    args=(product_id,)
                                ).start()
            except Exception as e:
                logging.error(f"Erreur WebSocket message: {e}")

        def on_error(ws, error):
            logging.error(f"Erreur WebSocket: {error}")

        def on_close(ws, close_status_code, close_msg):
            logging.warning("WebSocket ferm√© - tentative de reconnexion...")
            time.sleep(5)
            self.start_websocket()

        def on_open(ws):
            logging.info("‚úÖ WebSocket Coinbase connect√©")
            # S'abonner aux tickers
            subscribe_msg = {
                "type": "subscribe",
                "product_ids": self.instruments,
                "channels": ["ticker"]
            }
            ws.send(json.dumps(subscribe_msg))

        # Cr√©ation et d√©marrage du WebSocket
        self.ws = websocket.WebSocketApp(
            "wss://ws-feed.exchange.coinbase.com",
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        self.ws_thread = threading.Thread(target=self.ws.run_forever)
        self.ws_thread.daemon = True
        self.ws_thread.start()

    def analyze_realtime_data(self, product_id):
        """Analyse les donn√©es temps r√©el"""
        try:
            if product_id not in self.realtime_data or product_id not in self.historical_data:
                return
            
            realtime = self.realtime_data[product_id]
            historical = self.historical_data[product_id]
            
            # Cr√©er une ligne de donn√©es simul√©e bas√©e sur les donn√©es temps r√©el
            latest_row = historical.iloc[-1].copy()
            latest_row['close'] = realtime['price']
            latest_row['volume'] = realtime['volume_24h']
            
            # Recalculer les indicateurs avec le nouveau prix
            # (Simplification - dans un vrai syst√®me, on mettrait √† jour l'historique complet)
            
            # Faire une pr√©diction
            self.make_prediction(product_id, latest_row)
            
        except Exception as e:
            logging.error(f"Erreur analyse temps r√©el {product_id}: {e}")

    def run_analysis_cycle(self):
        """Lance un cycle d'analyse complet"""
        logging.info("üîÑ D√©but du cycle d'analyse...")
        self.send_telegram_message("üîÑ Analyse des march√©s en cours...")
        
        opportunities = 0
        for instrument in self.instruments:
            try:
                self.analyze_instrument(instrument)
                opportunities += 1
                time.sleep(1)  # Pause pour √©viter les limites de taux
            except Exception as e:
                logging.error(f"Erreur analyse {instrument}: {e}")
        
        message = f"‚úÖ Analyse termin√©e\nüìä {opportunities} instruments analys√©s\nü§ñ Surveillance temps r√©el active"
        self.send_telegram_message(message)
        logging.info(f"Cycle d'analyse termin√© - {opportunities} instruments")

    def start_scheduled_analysis(self):
        """Programme les analyses p√©riodiques"""
        # Analyse compl√®te toutes les heures
        schedule.every().hour.do(self.run_analysis_cycle)
        
        # Message de statut toutes les 4 heures
        schedule.every(4).hours.do(self.send_status_message)
        
        logging.info("üìÖ Analyses programm√©es: toutes les heures")

    def send_status_message(self):
        """Envoie un message de statut"""
        active_instruments = len(self.realtime_data)
        models_count = len(self.models)
        
        message = f"ü§ñ <b>BOT STATUS</b>\n"
        message += f"üì° Instruments actifs: {active_instruments}\n"
        message += f"üß† Mod√®les entra√Æn√©s: {models_count}\n"
        message += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
        message += f"‚úÖ Surveillance active"
        
        self.send_telegram_message(message)

    def run(self):
        """D√©marre le bot"""
        try:
            # Message de d√©marrage
            self.send_telegram_message("üöÄ <b>BOT DE TRADING D√âMARR√â</b>\nüìä Initialisation en cours...")
            
            # Analyse initiale
            self.run_analysis_cycle()
            
            # D√©marrage du WebSocket pour donn√©es temps r√©el
            self.start_websocket()
            
            # Programmation des t√¢ches
            self.start_scheduled_analysis()
            
            # Message de confirmation
            self.send_telegram_message("‚úÖ <b>BOT OP√âRATIONNEL</b>\nüî¥ Surveillance temps r√©el active\nüì± Vous recevrez les alertes ici")
            
            # Boucle principale
            logging.info("üéØ Bot op√©rationnel - En attente des signaux...")
            while True:
                schedule.run_pending()
                time.sleep(60)  # V√©rification chaque minute
                
        except KeyboardInterrupt:
            logging.info("Arr√™t du bot demand√© par l'utilisateur")
            self.send_telegram_message("üõë Bot arr√™t√© par l'utilisateur")
        except Exception as e:
            logging.error(f"Erreur critique: {e}")
            self.send_telegram_message(f"‚ùå Erreur critique: {e}")
        finally:
            if self.ws:
                self.ws.close()

def main():
    bot = CoinbaseRealtimeBot()
    bot.run()

if __name__ == "__main__":
    main()
